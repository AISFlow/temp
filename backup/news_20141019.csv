뉴스ID,뉴스GUID,일자(UTC timestamp),뉴스제목,본문,SENTIMENT,주요코인,카테고리,작성자,추천수,비추천수,출처,뉴스URL,이미지URL
42397994,DbF8Q09kuKX2XWBxAbF8at,1413746434,Gems Bitcoin App Lets Users Earn Money From Social Messaging,"A new social messaging app is aiming to disrupt the established social media business model through the power of crypto 2.0 technology. If big social media companies make money by monetizing data, the Gem project asks, shouldn't users also profit from the service?  Launching today at Inside Bitcoins Tel Aviv, Gems is seeking to uncover whether consumers can be compelled to change the way they view their relationship with social media, and in the process, embrace cryptocurrency.  Though lofty in its ideals, lead developer Daniel Peled told CoinDesk that users should find the Gems social messaging service familiar. Peled compared Gems to Whatsapp, with one addition, the user's username is also an alias for their bitcoin address, an innovation that allows Gems users to send both bitcoin and gems, an in-app token that will effectively decentralize ownership of the network itself.  Unlike with Whatsapp, users are incentivized to grow the network, receiving gems for certain actions. Gems can then be exchanged for bitcoin and ultimately sold for fiat dollars, Peled explained, meaning users are essentially paid for spreading the network:  ""Everything we do on Facebook or Whatsapp, [the companies are] making money out of it. They're using our information, they're selling it to advertisers and we don't see anything out of it. We think that the users should be rewarded much more for using the application. So anything that we can do to incentive people, we do it with Gems.""  Gems will soon be available for both iPhone and Android users.  Empowered by Counterparty  On a technical level, Gems is built on top of the Counterparty protocol, the peer-to-peer decentralized exchange that allows for asset issuance and trading.  Upon registering, Peled said, users receive a passphrase to their Gems account, which is actually working with Counterwallet, the project's web wallethttps://wiki.counterparty.io/w/Counterwallet. However, for users, all of this technical maneuvering happens behind the scenes, which Peled and his team hope will encourage more users into the bitcoin ecosystem.  ""You get a passphrase and a wallet built inside the social messenger, and because your name is also an alias to your phone number and to your bitcoin wallet, it makes it very easy to send Gems and bitcoins inside the application. It's just like sending a text message to a friend,"" Peled said. ""You don't need to know too much about the public address or private key, it makes everything very, very simple.""  Peled added that Gems does not save or keep user passwords on its servers. Privacy-conscious users also don't have to provide a phone number, though Peled said that, as with Skype, this makes it easier for users to identify others on the Gems network with whom they may want to message.  Expanding bitcoin's appeal  Peled indicated that the Counterparty protocol was critical to the Gems platform, as it enabled the development team to create assets without worrying about mining infrastructure, as this function is provided by the bitcoin network.  However, he disagrees that Gems is perhaps not giving back to bitcoin by not creating its own block chain, arguing that new Gems users will increase the size of the bitcoin network.  ""At the end of the day, trying to bring new people onboard, for every new person I talk to, I need to open a bitocin wallet for him, explain the user experience, explain the private key and the public key and cold storage,"" Peled said, noting the issues he hopes Gems will solve. ""It's very, very difficult and it takes one to two hours.""  Sending messages on the bitcoin block chain itself, rather than a cloud service, he said, would slow down Gems, making it less appealing to consumers.  ""I haven't seen a good social application built on top of bitcoin that works as smoothly as Whatsapp,"" Peled explained. ""So, the messaging side is just like any other messaging application, we use a server infrastructure, but the ownership and the reward model is built using block chain technology.""  Building value for Gems  Of course, there remains the question of why users would want to accumulate Gems given that they may fluctuate and even fall in value. However, Peled sees Gems as being more compelling than other altcoins on the market, as the strength of the platform's userbase will add value to the asset.  ""There are two things that will give real value to Gems, one is the users, 40% of the Gems are going to be distributed in a couple of years for inviting people in the network,"" Peled said. ""The second thing is we're trying to build a social network that is more fair for the user.""  Notably, users can also earn Gems by choosing to view advertisements on the platform. Publishers, in turn, will need to use Gems in order to market to app users.  ""Sending messages to your friends is free, but if you want to send unsolicited messages or if advertisers want to send messages to a specific target, then they would have to spend Gems,"" Peled explained.  Users can elect to see advertising and be rewarded with Gems, or opt out of this part of the service. However, the difference with Gems, Peled said, is that unlike Facebook and other alternatives, his platform gives the ultimate choice to the user.  Long term, Gems will seek to encourage application development on its platform, allowing entrepreneurs to build in-app features that leverage the currency.  ""I can think of a lot of things you can do when you have a social network that is monetized,"" Peled added.  Pre-sale coming soon  Like many other crypto 2.0 projects, Gems is also seeking to promote its initiative through an initial pre-sale of its native currency in what it characterized as an attempt to build a community of dedicated users, though the process has proved to be a point of contention for other notable projects in the sector.  However, Peled said that Gems believes there are real advantages to appealing to the bitcoin community rather than relying on VC capital.  ""Basically we're building a small community. A lot of us are already trying to add people to the ecosystem so if we give them a tool to show they can download this app, that it's a lot of fun, it's basically a tool that people are looking for,"" Peled said.  Images via Gems",POSITIVE,없음,BLOCKCHAIN | BTC | BUSINESS | MARKET | TECHNOLOGY,Pete Rizzo,0,0,CoinDesk,https://coindesk.com/markets/2014/10/19/gems-bitcoin-app-lets-users-earn-money-from-social-messaging,https://cdn.sanity.io/images/s3y3vcno/production/0c6a85ee7ccc5acb35c6b615ab9c0f9a30e65633-1456x702.png?w=300&h=300&fit=crop
42397983,DbF8Q09kuKX2XWBxAbF8P5,1413735995,Why Bitcoin's Core Developers Want Multiple Versions,"Recent debates about whether people should be allowed to make their own changes to the bitcoin protocol have highlighted an important notion: perhaps developing Bitcoin Core, the reference version of the code, isn’t the only way for people to contribute.  A recent alteration to the bitcoin code that made its way into a Linux variant called Gentoo left some people fuming before the developer switched it off by default.  ""These will never be merged into the bitcoin repository on Github, but people that want to use them can,"" bitcoin lead developer Wladimir J van der Laan said.  But what is Github, why does van der Laan have the authority to choose what goes in it, and how does bitcoin get developed in the first place?  How bitcoin is developed  The reference implementation for bitcoin protocol is called the Bitcoin Core. This is the code that Satoshi originally handed down to a core group of developers before disappearing.  Those ""disciples"" now maintain that code, along with the help of a broader community of developers. The focus is on making the code more efficient, but doing it carefully, and conservatively, so that nothing gets broken.  Bitcoin Core is managed using a software version control system called Git. This enables people to keep track of which versions of their code they are working on, and what changes they have made.  Bitcoin developers running Git on their computers connect to a central service so that they can all work on versions the same project at once. This service, called Github, has many different projects maintained by different groups of people. Bitcoin is one of those projects and it has its own Github page.  The code for the project is held in a single place on Github, called a repository. The official, deployable version of the bitcoin repository is known as the upstream repository, but people who want to work on their own changes to the code can create their own versions of the repository, by copying it into an online ‘fork’.  Developers can modify their forks as much as they like. They can ask for their fork to be merged back into the master repository by issuing a ‘pull request’, which opens up their version of the repository to other project members, who can review it and comment on it.  ""The idea is that other developers in the community will review the change,” explained van der Laan. ""Then, the submitter fixes the issues brought up by others. It may also be needed to rally some people to test the change, especially if it is complicated, or if there is a subjective component (ie, for UI or RPC changes).""  If enough people like the changes made in a pull request, then it gets merged back into the master repository. But who actually gets to merge the pull?  It turns out that there is a bitcoin priesthood, of sorts, that stewards what finally makes it into the Bitcoin Core code. Van der Laan, chief scientist and former lead developer Gavin Andresen, Jeff Garzik, Gregory Maxwell, and Pieter Wuille are the team who make the final decision, and that isn’t something that’s decided by voting, as you might find in a democracy.  “Single Github repositories are not democratic,” van der Laan explained. “Its maintainers cooperate on development and decide what is merged and when, and what is not. Difficult technical issues are not solved by popular voting.""  BIPS and pull requests  Where possible, though, bitcoin development typically operates via popular consensus. There are two categories of change, broadly speaking.  The Bitcoin Core is maintained in an intentionally conservative way, and most changes are made in a “non-controversial and janitorial” way, van der Laan said. They deal with small, incremental changes, rather than large, revolutionary ones. A bitcoin patch might move some code around to make it more readable, or perhaps optimise some memory usage.  There is another class of changes to bitcoin that have far more ramifications, and those are ones that change the consensus rules. The consensus rules are the technical rules that all bitcoin clients must adhere to for the bitcoin network to operate properly.  ""Those have to be scrutinized closely. They have to be discussed on the mailing list first, and there must be a BIP, and the pulls are generally controversial and stay open for a long time to discuss,” he said.  A BIP – short for Bitcoin Improvement Proposal – is a document suggesting a global change to some aspect of bitcoin. It can extend to things outside Bitcoin Core, including mobile wallets or key generation in hardware wallets. It can also govern processes around bitcoin, like changes to the decision making process.  Anyone can create a BIP, as long as they’re written in this format. The community talks about it, and if people like it, its status can be changed to ""active"" or ""final"".  Changes along these lines are the change in BIP 62, which was a change dealing with the transaction malleability flaw in bitcoin.  What improves the chance of a proposed change being implemented in the protocol? It helps for the author of a BIP to have written an example of the code for people to test out and review, van der Laan added.  Review and approval  Bitcoin consultant and security auditor Sergio Lerner would like to see more formalisation for the code approval process.  ""When you see a pull request that has been merged, it's difficult to tell who approved it [and to] what extent the patch was reviewed,” he said. ""You have to read a lot of comments and some ‘+1' which you can interpret as 'I agree to merge it', but you can also interpret it as 'I like it, but I haven't really reviewed the code.’""  Lerner would like to see a multi-signature patch approval process, in which a certain proportion of developers formally approve the code by signing off the review. That would be a bigger version of the process currently used in some wallets, where multiple signatures have to be used for a bitcoin address to be used.  Other things Lerner would like to see include a log of bugs found and an analysis of why they were not caught on time, a per-patch, security-focused external code review, a formal description of documentation that should accompany a patch and a description of what reviewing a patch actually means.  “Does it mean a line by line source code review? Does it mean checking if the documentation of the change is enough?” Lerner asked. “Does it mean analysing the change against known attack vectors?""  The problem is that this all takes time and human resources, Lerner said:  ""Obviously implementing all this requires more housekeeping, a higher budget, and more core developer resources (which currently are scarce). But a software that maintains an industry of $6bn requires it.""  Beyond Bitcoin Core  While Lerner outlines some requirements for code reviews, van der Laan echoes Gavin Andresen’s keynote speech at the Bitcoin 2014 conference, where he said that more could be done to streamline BIP approval.  “The BIP process could use some work. I would be happy if developers of other (full) node implementations were more active in commenting on proposals (or coming up with proposals),” he said.  Andresen also proposes moving BIP discussion and other cross-implementation concerns from the general bitcoin-development mailing list to a specific BIP mailing list.  Just as with software development on an open source project, the onus is always on users to make it happen.  “As it is inherently a global, distributed, disorganized process it's no single organization's job to manage the BIP process, so the onus would be here on people and organizations that care to band together and do something,” van der Laan suggested.  But shouldn’t the Bitcoin Foundation, bitcoin's chief trade organisation, be looking after such things? No, he argues. Instead, things in the bitcoin world are expanding beyond that, and the development team welcomes different implementations of bitcoin.  Van der Laan said:  ""Gavin's talk at Bitcoin 2014 made it clear that his focus is on diversifying. He talked about different full node implementation, even said 'more is better'. Even though maintaining Bitcoin Core is my job, I tend to agree with that.""  The onus should no longer be on the development of Bitcoin Core, van der Laan believes.  ""In the initial years Bitcoin Core was maybe excessively important, and its developers had to keep the light on for the node infrastructure (and stay up at night to patch bugs as they appear). But, moving forward, for bitcoin to be the global distributed system it was supposed to be, we should move beyond that.""  So, there may be a benevolent priesthood for Bitcoin Core, in the sense that the final decision about what goes into the the code rests with a small group of people. But that doesn't mean that this group wants things to be exclusive or elitist – far from it.  At least some of the core developers are actively encouraging others to expand the network with their own implementations, on the assumption that the majority of them will stick with the consensus rules. Those that don’t will fall out of sync, making it obvious who is in the minority and forcing them to fix it.  Evolving bitcoin in that direction could create room for the kinds of policy variances that some people have been asking for, while preserving the consensus rules: the parts that truly make bitcoin what it is. It would also ease the pressure on an overburdened set of people trying to support the technology underpinning a quickly growing business. And, done correctly, it might introduce some of the new processes that participants like Lerner are asking for.  The question is: how will bitcoin evolve such a variety of alternative implementations cleanly, efficiently and without any associated drama?  Diversify image via Shutterstock",NEUTRAL,없음,BLOCKCHAIN | BTC | BUSINESS | TECHNOLOGY | TRADING,Danny Bradbury,0,0,CoinDesk,https://coindesk.com/markets/2014/10/19/why-bitcoins-core-developers-want-multiple-versions,https://cdn.sanity.io/images/s3y3vcno/production/87c03b7150cc4ff5605ed80b33ad828e3f1addaa-1456x971.jpg?w=300&h=300&fit=crop
42397992,DbF8Q09kuKX2XWBxAbF8Wx,1413731475,Bitcoin Trader Customers Face Losses After Management Disappears,"A popular bitcoin arbitrage service has collapsed, resulting in the loss of customer funds and the dissolution of a company that had a notable presence in the industry.  The news marks the second time in recent weeks that the future of a well-known company in the bitcoin ecosystem has fallen into jeopardy, following the revelation that digital currency exchange Moolah would file for bankruptcy amid financial troubles.  Questions about the platform’s solvency began to emerge in June, when users asked for the Bitcoin Trader leadership to publish financial audits, though such a disclosure has not been issued. Finally, on 6th October, users began reporting that digital currency withdrawals were no longer working.  Bitcoin Trader soon stopped providing earnings information for both its trading and mining operations, telling customers that owner John Carley would soon release a statement on the status of the company. Thomas Opperman, representing the company in a series of posts to users, said that Carley had fallen out of communication but server work was continuing and issues were close to resolution.  Later, a statement from Carley was released claiming that the company had fallen victim to a debilitating hack following the conversion of all funds – including those belonging to customers – to bitcoin. Carley claimed that negotiations to recover the bitcoins had failed and subsequently declared his intent to file bankruptcy:  “My aim was to create something based on trust, just as bitcoin itself is based on distributed trust. Unfortunately I must admit today, I have failed. All left to do now is to declare bankruptcy with the Panamanian authorities and to hand over all relevant files and information for further investigation.”  Buildup of customer complaints  Though its collapse was sudden, Bitcoin Trader had long been a divisive company in the bitcoin industry.  In conversations with CoinDesk, a number of Bitcoin Trader customers said that, despite this, for many months, payouts were consistent with the expectations set by the company. As a result, many of their concerns were brushed aside.  Customer Josh Reighley said that Bitcoin Trader issued an announcement in early October stating that an audit had been conducted by a third-party would not be released. This, he said, stirred up even more concerns about the platform.  Then, users began reporting issues with withdrawals, which heightened concerns.  In emails provided to CoinDesk, Bitcoin Trader customer service representatives cited server issues and complications arising from the simultaneous processing of both fiat and bitcoin payments as reasons for the delay. A message dated 9th October suggested that the problem had been addressed, but according to customers, withdrawals were still not working.  CoinDesk reached out to both Carley and Opperman, but neither responded.  One company representative who wished to remain anonymous said that he had no direct contact with Carley and had no current affiliation with the platform.  Public presence eased concerns  Bitcoin Trader had been operating since October 2013, offering investment opportunities in both bitcoin trading markets as well as an in-house mining operation. Through its products, investors purchased shares and received daily payouts based on their investment.  In statements on its official website, as well as in advertisements and sponsored articles, Bitcoin Trader boasted a London-based team of professional traders and a bitcoin mine with at least 10 terahashes in mining capacity. Bitcoin Trader projected a positive image in the broader bitcoin industry, leveraging both event sponsorships and online content and advertising purchases to reach new markets.  Additionally, Bitcoin Trader sponsored several events in the bitcoin space, including the Bitcoin 2014 conference in Amsterdam, the The North American Bitcoin Conference in Chicago and the North American Bitcoin Car Giveaway Tour 2014.  Kryptoz CEO and co-founder Robbie Davidson, whose company is co-sponsoring the tour, said that Bitcoin Trader became involved after he met some of their North American representatives at a conference earlier this year.  Davidson explained that he thought Bitcoin Trader to be a professional, community-oriented business, and that he invested funds in the platform. However, he eventually grew concerned about information he received about the company, which prompted Kryptoz to cut sponsorship ties.  He explained:  “We didn’t know what was going on, but there were major problems with the site – people were able to put money in but not get money out. So we instantly pulled all banners because we didn’t want people just walking into a trap because they weren’t in the Facebook group.”  Censorship foretells problems  Customers told CoinDesk that until recently, the company appeared to be unusually profitable, but that timely payouts were awarded to customers. Others suggested that the Bitcoin Trader leadership actively suppressed dissenting voices in social media channels it controlled, leading to accusations that the company was hiding something.  Bitcoin trader Michaela Juric-Donlan said that she was banned from the company's official Facebook group after raising concerns about the status of customer funds.  “Apparently I was 'causing chaos' when I asked why withdrawals weren’t being processed,” she said.  Juric-Donlan and other customers began gathering in a new group for disenfranchised Bitcoin Trader customers, which has since served as an information hub for customers seeking recourse.  Cashout suspension triggers crisis  Though digital currency withdrawals were effectively disabled on 6th October, some customers were able to process fiat withdrawals while the company was citing server and bitcoin block chain connectivity problems as the reason for the issue.  Bitcoin Trader suspended the ability to review transaction histories on 13th October, according to customers. Juric-Donlan said that by 14th October services like EgoPay and PexPay were no longer available to most customers. One customer said that withdrawals had been possible as late as 15th October, but by then relations between the company and its user base had been strained.  Bitcoin Trader representatives on Facebook said that Carley, who was supposedly in sole control of the bitcoin funds, was located in an area affected by Typhoon Vongfong. This, they said, kept them from processing bitcoin withdrawals or answering the growing chorus of customers demanding answers.  One day later, staff member Opperman released a statement saying that many of Bitcoin Trader’s employees were resigning in the wake of Carley’s disappearance. He added that the site’s customers – himself included – may need to “move on” and suggested that calls be made to authorities where Carley was supposedly staying.  Picking up the pieces  What comes next is unclear for those involved. Former customers of the site said that they will begin the process of filing criminal complaints, but some who had thousands of dollars in both bitcoin and dollar-denominated credits on the site face the loss of their investments.  An effort has begun to use the block chain to try to trace transactions containing customers' bitcoins. Davidson said his company is cooperating fully with the investigation, calling it an operation “that could take months, even years for investors”.  A number of users have begun building a working document to compile all the information available about the now-defunct platform and all those associated with it. Estimates on how much was lost vary, but Bitcoin Trader claimed it held $2.2m in investor funds on its website. According to those involved with the recovery process, between $250,000 and $500,000 has been accounted for in customers polls.  Former customer Reighley told CoinDesk that his losses were minimized by his long-standing belief that Bitcoin Trader may have been a risky investment, but he provided one hypothesis for why others may not have been as lucky:  “We live in an ‘everyone find the truth that works for you’ age – and people have a strong tendency to believe what they want to be true. When someone pays you a lot of money, you really want to believe it is true.”  Image via Bitcoin Trader; Shutterstock",NEGATIVE,없음,BTC | BUSINESS | FIAT | MINING | REGULATION,Stan Higgins,0,0,CoinDesk,https://coindesk.com/markets/2014/10/19/bitcoin-trader-customers-face-losses-after-management-disappears,https://cdn.sanity.io/images/s3y3vcno/production/0d7e47fb5152a66e5e75365449fd5e6922360495-2560x1560.jpg?w=300&h=300&fit=crop
42397999,DbF8Q09kuKX2XWBxAbF8fo,1413724105,The Math Behind the Bitcoin Protocol,"One reason bitcoin can be confusing for beginners is that the technology behind it redefines the concept of ownership.  To own something in the traditional sense, be it a house or a sum of money, means either having personal custody of the thing or granting custody to a trusted entity such as a bank.  Bitcoin Protocol  With bitcoin the case is different. Bitcoins themselves are not stored either centrally or locally and so no one entity is their custodian. They exist as records on a distributed ledger called the block chain, copies of which are shared by a volunteer network of connected computers. To “own” a bitcoin simply means having the ability to transfer control of it to someone else by creating a record of the transfer in the block chain. What grants this ability? Access to an ECDSA private and public key pair. What does that mean and how does that secure bitcoin?  Let’s have a look under the hood.  ECDSA is short for Elliptic Curve Digital Signature Algorithm. It’s a process that uses an elliptic curve and a finite field to “sign” data in such a way that third parties can verify the authenticity of the signature while the signer retains the exclusive ability to create the signature. With bitcoin, the data that is signed is the transaction that transfers ownership.  ECDSA has separate procedures for signing and verification. Each procedure is an algorithm composed of a few arithmetic operations. The signing algorithm makes use of the private key, and the verification process makes use of the public key. We will show an example of this later.  But first, a crash course on elliptic curves and finite fields.  Elliptic curves  An elliptic curve is represented algebraically as an equation of the form:  y2 = x3 + ax + b  For a = 0 and b = 7 (the version used by bitcoin), it looks like this:  Elliptic curves have useful properties. For example, a non-vertical line intersecting two non-tangent points on the curve will always intersect a third point on the curve. A further property is that a non-vertical line tangent to the curve at one point will intersect precisely one other point on the curve.  We can use these properties to define two operations: point addition and point doubling.  Point addition, P + Q = R, is defined as the reflection through the x-axis of the third intersecting point R’ on a line that includes P and Q. It’s easiest to understand this using a diagram:  Similarly, point doubling, P + P = R is defined by finding the line tangent to the point to be doubled, P, and taking reflection through the x-axis of the intersecting point R’ on the curve to get R. Here’s an example of what that would look like:  Together, these two operations are used for scalar multiplication, R = a P, defined by adding the point P to itself a times. For example:  R = 7P  R = P + (P + (P + (P + (P + (P + P)))))  The process of scalar multiplication is normally simplified by using a combination of point addition and point doubling operations. For example:  R = 7P  R = P + 6P  R = P + 2 (3P)  R = P + 2 (P + 2P)  Here, 7P has been broken down into two point doubling steps and two point addition steps.  Finite fields  A finite field, in the context of ECDSA, can be thought of as a predefined range of positive numbers within which every calculation must fall. Any number outside this range “wraps around” so as to fall within the range.  The simplest way to think about this is calculating remainders, as represented by the modulus (mod) operator. For example, 9/7 gives 1 with a remainder of 2:  9 mod 7 = 2  Here our finite field is modulo 7, and all mod operations over this field yield a result falling within a range from 0 to 6.  Putting it together  ECDSA uses elliptic curves in the context of a finite field, which greatly changes their appearance but not their underlying equations or special properties. The same equation plotted above, in a finite field of modulo 67, looks like this:  It’s now a set of points, in which all the x and y values are integers between 0 and 66. Note that the “curve” still retains its horizontal symmetry.  Point addition and doubling are now slightly different visually. Lines drawn on this graph will wrap around the horizontal and vertical directions, just like in a game of Asteroids, maintaining the same slope. So adding points (2, 22) and (6, 25) looks like this:  The third intersecting point is (47, 39) and its reflection point is (47, 28).  Back to ECDSA and bitcoin  A protocol such as bitcoin selects a set of parameters for the elliptic curve and its finite field representation that is fixed for all users of the protocol. The parameters include the equation used, the prime modulo of the field, and a base point that falls on the curve. The order of the base point, which is not independently selected but is a function of the other parameters, can be thought of graphically as the number of times the point can be added to itself until its slope is infinite, or a vertical line. The base point is selected such that the order is a large prime number.  Bitcoin uses very large numbers for its base point, prime modulo, and order. In fact, all practical applications of ECDSA use enormous values. The security of the algorithm relies on these values being large, and therefore impractical to brute force or reverse engineer.  In the case of bitcoin:  Elliptic curve equation: y2 = x3 + 7  Prime modulo = 2256 – 232 – 29 – 28 – 27 – 26 – 24 - 1 = FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F  Base point = 04 79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798 483ADA77 26A3C465 5DA4FBFC 0E1108A8 FD17B448 A6855419 9C47D08F FB10D4B8  Order = FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141  Who chose these numbers, and why? A great deal of research, and a fair amount of intrigue, surrounds the selection of appropriate parameters. After all, a large, seemingly random number could hide a backdoor method of reconstructing the private key. In brief, this particular realization goes by the name of secp256k1 and is part of a family of elliptic curve solutions over finite fields proposed for use in cryptography.  Private keys and public keys  With these formalities out of the way, we are now in a position to understand private and public keys and how they are related. Here it is in a nutshell: In ECDSA, the private key is an unpredictably chosen number between 1 and the order. The public key is derived from the private key by scalar multiplication of the base point a number of times equal to the value of the private key. Expressed as an equation:  public key = private key * base point  This shows that the maximum possible number of private keys (and thus bitcoin addresses) is equal to the order.  In a continuous field we could plot the tangent line and pinpoint the public key on the graph, but there are some equations that accomplish the same thing in the context of finite fields. Point addition of p + q to find r is defined component-wise as follows:  c = (qy - py) / (qx - px)  rx = c2 - px - qx  ry = c (px - rx) - py  And point doubling of to find r is as follows:  c = (3px2 + a) / 2py  rx = c2 - 2px  ry = c (px - rx) - py  In practice, computation of the public key is broken down into a number of point doubling and point addition operations starting from the base point.  Let’s run a back of the envelope example using small numbers, to get an intuition about how the keys are constructed and used in signing and verifying. The parameters we will use are:  Equation: y2 = x3 + 7 (which is to say, a = 0 and b = 7)  Prime Modulo: 67  Base Point: (2, 22)  Order: 79  Private key: 2  First, let’s find the public key. Since we have selected the simplest possible private key with value = 2, it will require only a single point doubling operation from the base point. The calculation looks like this:  c = (3 * 22 + 0) / (2 * 22) mod 67  c = (3 * 4) / (44) mod 67  c = 12 / 44 mod 67  Here we have to pause for a bit of sleight-of-hand: how do we perform division in the context of a finite field, where the result must always be an integer? We have to multiply by the inverse, which space does not permit us to define here (we refer you to here and here if interested). In the case at hand, you will have to trust us for the moment that:  44-1 = 32  Moving right along:  c = 12 * 32 mod 67  c = 384 mod 67  c = 49  rx = (492 - 2 * 2) mod 67  rx = (2401 - 4) mod 67  rx = 2397 mod 67  rx = 52  ry = (49 * (2 - 52) - 22) mod 67  ry = (49 * (-50) - 22) mod 67  ry = (-2450 - 22) mod 67  ry = -2472 mod 67  ry = 7  Our public key thus corresponds to the point (52, 7). All that work for a private key of 2!  This operation - going from private to public key - is computationally easy in comparison to trying to work backwards to deduce the private key from the public key, which while theoretically possible is computationally infeasible due to the large parameters used in actual elliptic cryptography.  Therefore, going from the private key to the public key is by design a one-way trip.  As with the private key, the public key is normally represented by a hexadecimal string. But wait, how do we get from a point on a plane, described by two numbers, to a single number? In an uncompressed public key the two 256-bit numbers representing the x and y coordinates are just stuck together in one long string. We can also take advantage of the symmetry of the elliptic curve to produce a compressed public key, by keeping just the x value and noting which half of the curve the point is on. From this partial information we can recover both coordinates.  Signing data with the private key  Now that we have a private and public key pair, let’s sign some data!  The data can be of any length. The usual first step is to hash the data to generate a number containing the same number of bits (256) as the order of the curve. Here, for the sake of simplicity, we’ll skip the hashing step and just sign the raw data z. We’ll call G the base point, the order, and d the private key. The recipe for signing is as follows:  Choose some integer k between 1 and n - 1.  Calculate the point (x, y) = k * G, using scalar multiplication.  Find r = x mod n. If r = 0, return to step 1.  Find s = (z + r * d) / k mod n. If s = 0, return to step 1.  The signature is the pair (r, s)  As a reminder, in step 4, if the numbers result in a fraction (which in real life they almost always will), the numerator should be multiplied by the inverse of the denominator. In step 1, it is important that k not be repeated in different signatures and that it not be guessable by a third party. That is, k should either be random or generated by deterministic means that are kept secret from third parties. Otherwise it would be possible to extract the private key from step 4, since , z, r, k and are all known. You can read about a past exploit of this type here.  Let’s pick our data to be the number 17, and follow the recipe. Our variables:  z = 17 (data)  n = 79 (order)  G = (2, 22) (base point)  d = 2 (private key)  Pick a random number:  k = rand(1, n - 1)  k = rand(1, 79 - 1)  k = 3 (is this really random? OK you got us, but it will make our example simpler!)    Calculate the point. This is done in the same manner as determining the public key, but for brevity let’s omit the arithmetic for point addition and point doubling.    (x, y) = 3G  (x, y) = G + 2G  (x, y) = (2, 22) + (52, 7)  (x, y) = (62, 63)  x = 62  y = 63    Find r:    r = x mod n  r = 62 mod 79  r = 62    Find :    s = (z + r * d) / k mod n  s = (17 + 62 * 2) / 3 mod 79  s = (17 + 124) / 3 mod 79  s = 141 / 3 mod 79  s = 47 mod 79  s = 47  Note that above we were able to divide by 3 since the result was an integer. In real-life cases we would use the inverse of k (like before, we have hidden some gory details by computing it elsewhere):  s = (z + r * d) / k mod n  s = (17 + 62 * 2) / 3 mod 79  s = (17 + 124) / 3 mod 79  s = 141 / 3 mod 79  s = 141 * 3-1 mod 79  s = 141 * 53 mod 79  s = 7473 mod 79  s = 47    Our signature is the pair (r, ) = (62, 47).    As with the private and public keys, this signature is normally represented by a hexadecimal string.  Verifying the signature with the public key  We now have some data and a signature for that data. A third party who has our public key can receive our data and signature, and verify that we are the senders. Let’s see how this works.  With Q being the public key and the other variables defined as before, the steps for verifying a signature are as follows:  Verify that r and s are between 1 and n - 1.  Calculate w = s-1 mod n  Calculate u = z * w mod n  Calculate v = r * w mod n  Calculate the point (x, y) = uG + vQ  Verify that r = x mod n. The signature is invalid if it is not.  Why do these steps work? We are skipping the proof, but you can read the details here. Let’s follow the recipe and see how it works. Our variables, once again:  z = 17 (data)  (r, s) = (62, 47) (signature)  n = 79 (order)  G = (2, 22) (base point)  Q = (52, 7) (public key)  Verify that r and are between 1 and - 1. Check and check.  r: 1 <= 62 < 79  s: 1 <= 47 < 79    Calculate w:    w = s-1 mod n  w = 47-1 mod 79  w = 37    Calculate u:    u = zw mod n  u = 17 * 37 mod 79  u = 629 mod 79  u = 76    Calculate v:    v = rw mod n  v = 62 * 37 mod 79  v = 2294 mod 79  v = 3    Calculate the point (x, y):    (x, y) = uG + vQ  Let’s break down the point doubling and addition in uG and vQ separately.  uG = 76G  uG = 2(38G)  uG = 2( 2(19G) )  uG = 2( 2(G + 18G) )  uG = 2( 2(G + 2(9G) ) )  uG = 2( 2(G + 2(G + 8G) ) )  uG = 2( 2(G + 2(G + 2(4G) ) ) )  uG = 2( 2(G + 2(G + 2( 2(2G) ) ) ) )  Sit back for a moment to appreciate that by using the grouping trick we reduce 75 successive addition operations to just six operations of point doubling and two operations of point addition. These tricks will come in handy when the numbers get really large.  Working our way from the inside out:  uG = 2( 2(G + 2(G + 2( 2( 2(2, 22) ) ) ) ) )  uG = 2( 2(G + 2(G + 2( 2(52, 7) ) ) ) )  uG = 2( 2(G + 2(G + 2(25, 17) ) ) )  uG = 2( 2(G + 2( (2, 22) + (21, 42) ) ) )  uG = 2( 2(G + 2(13, 44) ) )  uG = 2( 2( (2, 22) + (66, 26) ) )  uG = 2( 2(38, 26) )  uG = 2(27, 40)  uG = (62, 4)  And now for vQ:  vQ = 3Q  vQ = Q + 2Q  vQ = Q + 2(52, 7)  vQ = (52, 7) + (25, 17)  vQ = (11, 20)  Putting them together:  (x, y) = uG + vQ  (x, y) = (62, 4) + (11, 20)  (x, y) = (62, 63)  Clearly step 5 is the bulk of the work. For the final step,    Verify that r = x mod n    r = x mod n  62 = 62 mod 79  62 = 62  Our signature is valid!  Conclusion  For those of you who saw all the equations and skipped to the bottom, what have we just learned?  We have developed some intuition about the deep mathematical relationship that exists between public and private keys. We have seen how even in the simplest examples the math behind signatures and verification quickly gets complicated, and we can appreciate the enormous complexity which must be involved when the parameters involved are 256-bit numbers. We have seen how the clever application of the simplest mathematical procedures can create the one-way “trap door” functions necessary to preserve the information asymmetry which defines ownership of a bitcoin. And we have newfound confidence in the robustness of the system, provided that we carefully safeguard the knowledge of our private keys.  In other words, this is why it is commonly said that bitcoin is “backed by math”.  If you hung in through the complicated bits, we hope it gave you the confidence to take the next step and try out the math on your own (a modular arithmetic calculator makes the finite field math much easier). We found that going through the steps of signing and verifying data by hand provides a deeper understanding of the cryptography that enables bitcoin’s unique form of ownership.  This article has been republished here with permission from the author. Originally published on Chain.com. The author gives special thanks to Steven Phelps for help with this article.  Eric Rykwalder is a software engineer and one of Chain.com’s founders.",NEUTRAL,없음,BLOCKCHAIN | BTC | MINING | TECHNOLOGY | RESEARCH,Eric Rykwalder,0,0,CoinDesk,https://coindesk.com/markets/2014/10/19/the-math-behind-the-bitcoin-protocol,https://cdn.sanity.io/images/s3y3vcno/production/367154c408479258b896bf197cbd241560207b31-1456x870.jpg?w=300&h=300&fit=crop
