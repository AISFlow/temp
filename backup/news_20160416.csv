뉴스ID,뉴스GUID,일자(UTC timestamp),뉴스제목,본문,SENTIMENT,주요코인,카테고리,작성자,추천수,비추천수,출처,뉴스URL,이미지URL
42426793,sd6iOBkuiC3F0LYOyJwj7h,1460824310,Who Will Pay for Turing-Complete Smart Contracts?,"Chris DeRose is a journalist, software developer, bitcoin evangelist, public speaker and lead developer of Drop Zone.  In this feature, DeRose discusses blockchain-based smart contracts, and why he believes the cost-benefits of this application of the technology are not widely understood.  Lost in our 'pie-in-the-sky' projections on the future of blockchains is the most important concern anyone should have on the technology: What are the opportunity costs?  Nowhere is that more pronounced in the current debates then in the case of the ""smart contract"".  While I believe that smart contracts will provide a number of efficiencies in our blockchain future, there's one category of smart contracts that I'm most skeptical of – that of the recently popular ""Turing complete"" smart contract.  All smart contract platforms in use today fall into roughly two broad categories that are divided along the lines of whether the platform is or isn't ""Turing complete."" So what does this feature enable? Turing completeness is a property of any programming language that allows a computer to simulate anything that our universe contains.  If a language is Turing complete, it can provide all of the logic we've grown accustomed to in our computers. Turing completeness enables a computer to 'loop' and process its own output in iteratively complex terms. This property is absent in nearly all public blockchains. But with the modern advent of Ethereum, this feature is now available to aspiring blockchain coders.  Though this feature is the innovation that Ethereum has advertised as its competitive advantage, it's a trivial switch to flip 'on'. So, why wasn't this feature included in earlier blockchains?  Bitcoin implemented the world's first smart contract system, and intentionally switched this feature 'off'. Bitcoin supports a number of simple contract types ranging from ""multisig"", (the transfer of value given approval by a number of parties); ""check timelock"" (contracts which authorize the spending of value after an amount of time has passed); and a handful of simpler contracts which closely resemble the functions of a paper check in assigning value to a recipient.  With Turing completeness, the possibilities for programming smart contracts are only limited to the amount of creativity and processing time for which a contract designer is willing to pay.  Cost benefits  So, what's the problem with giving users more options?  Well, off the bat, there's the size and processing costs that come with allowing users to store more data on the blockchain. With bitcoin, even one megabyte every 10 minutes is controversially large. And with Turing-complete blockchains like Ethereum, the size and processing issues are enormously more pronounced.  This overhead reduces the ability for small computers and nodes to run the blockchain with low energy and bandwidth. This also impacts any node operating in a remote location. Though such low-end overhead support may seem trivial in the context of the aspirations of large banking projects, it's important to recognize the effects of this trade-off when applied to the primary reason to use blockchains – servicing the underserved.  To understand why blockchains have found an efficiency in servicing the underserved, one must understand why users 'mine', or expend costs in order to secure and process transactions on a blockchain network.  In bitcoin, mining acts as an incentive to reward those who may benefit from the utility of the system. People mine because they wish to convert ""registered"" value, electricity registered in their name, into ""anonymous"" value that they can use to transact on the Internet.  They may want to do so due to local currency restrictions or to have better access to an easier way to spend money online.  But the costs to the one providing this service must be supported by a high number of users who want to actually use that service.  Whether such demand exists for a Turing-complete blockchain network remains to be seen. Thus far, this proposition would appear dubious.  Network benefits  Such subsidies would require that an inordinate amount of underserved users are currently looking for Turing completeness, and not building smart contracts because of the lack of this feature.  While there are certainly many users being denied access to basic contract services, the question remains whether the value of the difference in service can pay for the inordinately higher overhead they require.  Put simply, there needs to be a lot more of these users than have been found using just the bitcoin network itself.  To date, all Turing-complete miners today are only mining for the speculative value for ether, the native token on the Ethereum network, and to date no such underserved utility has been found – the proposition would seem extraordinary.  Another finicky proposition in Turing-complete smart contracts is that of the ""oracle"".  In a smart contract, data needs to enter the blockchain from an outside source in order to be of use. The source of this information – whether it be the price of a commodity, or the outcome of a sporting event, needs to be broadcast by individuals.  These individuals are called ""oracles"".  In non-Turing complete smart contract platforms, these oracles are to be found in ""multisig"" contracts, where one of the parties is the oracle, and the other two parties are the contract participants. In a ""two-of-three"" multisig operation, for instance, the oracle merely enters a winner onto the blockchain without additional code attached.  In a Turing-complete model, the parties themselves broadcast the code onto the blockchain well in advance, and let the nodes on the blockchain determine the outcome at the time an oracle broadcasts the event outcome 'data'.  So what's the difference? Well, in a Turing-complete model, a secondary contract can be broadcast alongside the primary contract for the sole purpose of 'corrupting' the oracle. This means that participants in the Turing-complete contract can not only engage in a contract, but can also bribe the oracle with impunity, and without repercussion.  This problem becomes more pronounced as more individuals stand to gain by engaging in the bribery attempt. Though it's still possible for oracles to be bribed the old-fashioned way in a non-Turing arrangement, the delivery of value isn't guaranteed, and the risk of corruption is significantly mitigated.  Transparency issues  Yet another major issue with Turing completeness is, perhaps ironically, their transparency implications.  As part of the requirements to evaluate a Turing-complete contract, the code to that contract must be publicly available. In Turing-complete blockchains, this code is presented at the time that its participants engage in an agreement.  While transparency can often be an advantage to some value-transfer propositions, the problems associated with broadcasting everyone's position are fairly obvious. Most financial contracts require that information be asymmetrically held between the involved parties, so that uninvolved traders cannot trade advantageously on these agreements.  Should a major bank be found taking a position in the market (say a futures contract), the risk to that institution is that the market can publicly trade on, and determine the future of that bank before the contract has executed. Though there are some theoretical fixes to the problems of disclosure, these solutions will be a long time coming, and may never arrive at all.  Decentralization is rarely efficient, and is generally only an efficiency when individuals have exhausted all other options. The most successful blockchains will be found where the degree of decentralization occurs around the areas that match the regulatory arbitrage requirements they need, without any additional waste.  Thus far, evaluating code itself has yet to incur enough risk to justify the inordinate overhead and complexity needed to sustain this cost. Currently, most of the actors that need such services are finding that payment transfer alone entirely wraps the risk.  Offshore gambling institutions and blockchain users have been able to operate code on their websites with little fear of reprisal from countries friendly to their service. And it would be expected that for occurrences where the risk of default is impacting their ability to retain users, ""check timelock"" contracts will suffice.  Blockchains are an amazing tool for servicing those that the regulatory environment requires that they service.  However, as the hype cycle begins in this new phase of blockchain, it's important to remember that as we look back, the question of ""Who needs Turing complete smart contracts?"" may very well turn out to be ""No one"".  Follow Chris DeRose on Twitter.  Check image via Shutterstock",NEUTRAL,없음,BLOCKCHAIN | BTC | ETH | FIAT | TECHNOLOGY,Chris DeRose,0,0,CoinDesk,https://coindesk.com/markets/2016/04/16/who-will-pay-for-turing-complete-smart-contracts,https://cdn.sanity.io/images/s3y3vcno/production/4fb6b2a638b905882ec8ce354ed3a2ef3fb198ef-1500x935.jpg?w=300&h=300&fit=crop
42426792,sd6iOBkuiC3F0LYOyJwj1h,1460818802,The 9 Mistakes I Made When Bringing Blockchain to My Startup,"John Rampton is an entrepreneur, blockchain enthusiast and online marketing guru. He is founder of the online payments company Due.  In this opinion piece, Rampton recalls the lessons he learned when trying to apply blockchain solutions to his startup.  In serving as a record for every bitcoin that has been generated and transferred between parties, the blockchain has a critical role to play. Each cryptocurrency has its own blockchain, so it becomes very important to be able to use it correctly in order to maintain its quality and credibility as a value exchange network.  For me, I originally sought out blockchain for a project that would transform the online database functionality powering our online invoicing and payment system, which included the directory of users, their staff, and their clients.  Because of the complexity of keeping all this transaction data organized and secure, we wanted to offer a streamlined transaction system for our customers that offered greater payment options across multiple traditional and digital currencies while lowering transaction costs and speeding up the payment process.  At the time, I recognized the potential that blockchain technology had to help us quickly advance our technology and the solution we offered customers, thereby creating a competitive advantage.  The only problem? I hadn't yet developed a deep knowledge of the technology, so mistakes were made along the way.  As a relatively new concept, blockchain is still evolving, so it’s easy to understand how mistakes can be made in terms of how it can actually be used. Many processes are still being tested to see if private blockchain applications will work for various business functions. By sharing the mistakes I’ve made, hopefully others can learn and avoid the same pitfalls  With that, here are the nine things not to do when using blockchain that we learned the hard way.  1. Failing to understand how blockchain actually works  Although dynamic and easier to manage once in the midst of using it, I made the mistake of just assuming I could figure out what blockchain was all about over time.  It’s a much better idea to take the time to read the available research and how-to guides. It’s also a good idea to seek out information from qualified companies that work in the bitcoin and blockchain space, as well as visit forums where you can ask questions and gain a more practical understanding.  If I had done this first, I would not have fumbled along and wasted so much time and effort. For example, I would have realized that certain data systems can sit outside the blockchain and still work without leading to operational redundancies.  2. Not selecting the blockchain software that aligns with my business purpose  Initially, I made the mistake of turning to the bitcoin blockchain because my criteria was a) that I had heard of it before, and b) it had been around the longest in terms of testing and stability.  This made it the most credible choice at the time – but not necessarily the one that would work well with my business need.  The problem is that it wasn’t exactly what I was looking for in terms of my business purpose once I started looking into available custom blockchain software that has since been developed and deployed.  While the new custom blockchain software has yet to go through as much testing, and may not have the same level of robustness, I have found one that aligns with my business needs.  3. Being impatient and trying to rush the timeline for blockchain adoption  I thought everyone else would be as excited as I was about the potential of blockchain for various business applications.  However, I saw that it takes time to get buy-in from other organizations that I wanted to include in my private blockchain. Not only did I have to convince them of the value, but then we also had to agree on using the same software – not the easiest process by any means.  Since then, I’ve had to learn to be patient. But in that time I also turned to a more proactive approach in order to show these organizations the benefits they would receive. Ultimately, I believe they will come around to the idea – eventually.  4. Thinking every business function can be improved with blockchain  Don’t assume like I did that, because blockchain seems so flexible as part of machine technology, that it will help every business function.  That's because it won’t – at least not right now in its current form.  The good news is that, since the network is only accessible to a limited group of people, anything that doesn’t work as part of a test doesn’t have to end up impacting the business or your brand’s reputation.  5. Believing the system is already protected from user mistakes  While the internet uses domain names rather than numeric-based IP addresses to reference a location, blockchain nodes are only referenced by public key hash, which makes them more susceptible to human error.  This has happened to me as it has to so many others, so developing something similar to how the internet uses domain names could help solve this typical user mistake.  6. Not limiting access to private keys  Within an organization, not everyone should have access to the private key file that unlocks access to the blockchain.  That’s because this can essentially corrupt the ledger because people are using it who may not know what they are doing. While the network needs to be accessible for use, I had to determine how to decide who should use it and, then, how to go about making it accessible.  I am still working on a contingency plan should the private key get corrupted or lost.  7. Making the blockchain too 'heavy'  I realized that, in using blockchain for business applications with a high volume of information held within various documents, the amount of stored blockchain data can add up quickly.  This is because the blockchain tends to replicate itself with every node that is added. To lighten the blockchain load, thereby returning its processing speed and efficiency, I had to link the blockchain to an external data source.  While this may reduce its reliability to a certain degree through the separation of the data, it is still a better solution to a data-heavy blockchain.  8. Not realizing there are limitations to blockchain as a database  While it is an excellent solution for a secure and private database, it is not a store-all for an endless amount of data. Trying to use it for any large-scale database application is a mistake.  Not only can the database on blockchain not hold all the information you need it to contain reliably, but it also may become too complex with the addition of other necessary database features that help analyze that information.  9. Not seeing the potential flaws within blockchain  Because I’ve been so excited about this new technology, I have taken the approach that it is the end-all solution – but the reality is that there are many inherent flaws in its design that still need to be addressed.  This is a system that continues to evolve, which leaves it open to flaws that will need to be addressed.  That means I had to think more about proceeding with caution before completely integrating blockchain technology into the applications I was using it for within my business.  Instead, I’ve stuck to a testing phase and limited use to see how the flaws that have become apparent are addressed. This is another reason why it is important to continue researching, reading, and engaging with forums and thought leaders in cryptocurrency.  Conclusion  Like mistakes in any part of business, these blockchain errors have become the necessary lessons that propelled me toward greater success with incorporating the technology into my business processes.  The most important lesson? Be open and curious to the potential that blockchain technology may hold for numerous applications – and then proceed thoughtfully with thorough research and testing.  Collaboration among businesses looking to adopt potential applications can make this process that much more fruitful.  Mistake image via Shutterstock",NEUTRAL,없음,BLOCKCHAIN | BTC | BUSINESS | TECHNOLOGY | RESEARCH,John Rampton,0,0,CoinDesk,https://coindesk.com/markets/2016/04/16/the-9-mistakes-i-made-when-bringing-blockchain-to-my-startup,https://cdn.sanity.io/images/s3y3vcno/production/b43c9f2582f09a9801f8ebc76551b44dff7fa399-1500x997.jpg?w=300&h=300&fit=crop
